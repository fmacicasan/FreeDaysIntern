// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package freedays.app;

import freedays.app.FDAdmin;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FDAdminDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FDAdminDataOnDemand: @Component;
    
    private Random FDAdminDataOnDemand.rnd = new SecureRandom();
    
    private List<FDAdmin> FDAdminDataOnDemand.data;
    
    public FDAdmin FDAdminDataOnDemand.getNewTransientFDAdmin(int index) {
        FDAdmin obj = new FDAdmin();
        return obj;
    }
    
    public FDAdmin FDAdminDataOnDemand.getSpecificFDAdmin(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        FDAdmin obj = data.get(index);
        return FDAdmin.findFDAdmin(obj.getId());
    }
    
    public FDAdmin FDAdminDataOnDemand.getRandomFDAdmin() {
        init();
        FDAdmin obj = data.get(rnd.nextInt(data.size()));
        return FDAdmin.findFDAdmin(obj.getId());
    }
    
    public boolean FDAdminDataOnDemand.modifyFDAdmin(FDAdmin obj) {
        return false;
    }
    
    public void FDAdminDataOnDemand.init() {
        data = FDAdmin.findFDAdminEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'FDAdmin' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<freedays.app.FDAdmin>();
        for (int i = 0; i < 10; i++) {
            FDAdmin obj = getNewTransientFDAdmin(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

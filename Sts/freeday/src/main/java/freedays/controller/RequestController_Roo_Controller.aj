// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package freedays.controller;

import freedays.app.FreeDay;
import freedays.app.RequestStatus;
import freedays.domain.ApplicationRegularUser;
import freedays.domain.Request;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RequestController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.GET)
    public String RequestController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("requests", Request.findRequestEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Request.countRequests() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("requests", Request.findAllRequests());
        }
        return "requests/list";
    }
    
    @ModelAttribute("freedays")
    public Collection<FreeDay> RequestController.populateFreeDays() {
        return FreeDay.findAllFreeDays();
    }
    
    @ModelAttribute("requeststatuses")
    public Collection<RequestStatus> RequestController.populateRequestStatuses() {
        return Arrays.asList(RequestStatus.class.getEnumConstants());
    }
    
    @ModelAttribute("applicationregularusers")
    public Collection<ApplicationRegularUser> RequestController.populateApplicationRegularUsers() {
        return ApplicationRegularUser.findAllApplicationRegularUsers();
    }
    
    @ModelAttribute("requests")
    public Collection<Request> RequestController.populateRequests() {
        return Request.findAllRequests();
    }
    
    String RequestController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
